{"version":3,"sources":["TodoItemsContext.tsx","TodoItems.tsx","TodoItemForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoItemsContext","createContext","defaultState","todoItems","localStorageKey","TodoItemsContextProvider","children","useReducer","todoItemsReducer","state","dispatch","useEffect","handleStorageChange","event","savedState","localStorage","getItem","type","data","JSON","parse","window","addEventListener","removeEventListener","setItem","stringify","Provider","value","useTodoItems","todoItemsContext","useContext","Error","action","id","Date","now","toString","Math","floor","random","done","todoItem","filter","arrayMove","oldIndex","newIndex","sortedItems","slice","sort","a","b","console","log","changedIndex","findIndex","newTitle","title","newDetails","details","map","item","index","itemIndex","spring","damping","stiffness","duration","useTodoItemListStyles","makeStyles","root","listStyle","padding","SortingButon","withStyles","theme","marginTop","Button","sortingKey","TodoItemsList","classes","itemIds","useMemo","i","handleOnDragEnd","useCallback","over","active","indexOf","handleOnSort","undefined","onDragEnd","items","variant","color","onClick","removeItem","startIcon","className","motion","li","transition","layout","useTodoItemCardStyles","marginBottom","doneRoot","textDecoration","TodoItemCard","useSortable","attributes","listeners","setNodeRef","transform","style","CSS","Translate","handleDelete","handleToggleDone","useState","titleInput","editTitleInput","detailsInput","editDetailsInput","titleError","setTitleError","changeItem","length","Card","ref","classnames","CardHeader","IconButton","aria-label","FormControlLabel","control","Checkbox","checked","onChange","name","label","avatar","subheader","display","TextField","required","marginRight","placeholder","error","Boolean","e","target","CardContent","Typography","component","useInputStyles","TodoItemForm","useForm","handleSubmit","reset","watch","onSubmit","formData","defaultValue","rules","render","field","fullWidth","multiline","disabled","createMuiTheme","palette","primary","main","secondary","Content","Container","maxWidth","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40c0009f.chunk.js","sourcesContent":["import {arrayMove} from '@dnd-kit/sortable'\r\nimport {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useReducer,\r\n} from 'react'\r\n\r\nexport interface TodoItem {\r\n  id: string\r\n  title: string\r\n  details?: string\r\n  done: boolean\r\n}\r\n\r\ninterface TodoItemsState {\r\n  todoItems: TodoItem[]\r\n}\r\n\r\ninterface TodoItemsAction {\r\n  type:\r\n    | 'loadState'\r\n    | 'add'\r\n    | 'delete'\r\n    | 'toggleDone'\r\n    | 'dragEnd'\r\n    | 'setSorted'\r\n    | 'infoChange'\r\n  data: any\r\n}\r\n\r\nconst TodoItemsContext = createContext<\r\n  (TodoItemsState & {dispatch: (action: TodoItemsAction) => void}) | null\r\n>(null)\r\n\r\nconst defaultState = {todoItems: []}\r\nconst localStorageKey = 'todoListState'\r\n\r\nexport const TodoItemsContextProvider = ({\r\n  children,\r\n}: {\r\n  children?: ReactNode\r\n}) => {\r\n  const [state, dispatch] = useReducer(todoItemsReducer, defaultState)\r\n\r\n  useEffect(() => {\r\n    function handleStorageChange(event: StorageEvent) {\r\n      const savedState = localStorage.getItem(localStorageKey)\r\n      if (savedState) {\r\n        try {\r\n          dispatch({type: 'loadState', data: JSON.parse(savedState)})\r\n        } catch {}\r\n      }\r\n    }\r\n    window.addEventListener('storage', handleStorageChange)\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const savedState = localStorage.getItem(localStorageKey)\r\n\r\n    if (savedState) {\r\n      try {\r\n        dispatch({type: 'loadState', data: JSON.parse(savedState)})\r\n      } catch {}\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(state))\r\n  }, [state])\r\n\r\n  return (\r\n    <TodoItemsContext.Provider value={{...state, dispatch}}>\r\n      {children}\r\n    </TodoItemsContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTodoItems = () => {\r\n  const todoItemsContext = useContext(TodoItemsContext)\r\n\r\n  if (!todoItemsContext) {\r\n    throw new Error(\r\n      'useTodoItems hook should only be used inside TodoItemsContextProvider'\r\n    )\r\n  }\r\n\r\n  return todoItemsContext\r\n}\r\n\r\nfunction todoItemsReducer(state: TodoItemsState, action: TodoItemsAction) {\r\n  switch (action.type) {\r\n    case 'loadState': {\r\n      return action.data\r\n    }\r\n    case 'add':\r\n      return {\r\n        ...state,\r\n        todoItems: [\r\n          {id: generateId(), done: false, ...action.data.todoItem},\r\n          ...state.todoItems,\r\n        ],\r\n      }\r\n    case 'delete':\r\n      return {\r\n        ...state,\r\n        todoItems: state.todoItems.filter(({id}) => id !== action.data.id),\r\n      }\r\n    case 'dragEnd':\r\n      return {\r\n        ...state,\r\n        todoItems: arrayMove(\r\n          state.todoItems,\r\n          action.data.oldIndex,\r\n          action.data.newIndex\r\n        ),\r\n      }\r\n    case 'setSorted': {\r\n      let sortedItems = state.todoItems.slice().sort((a, b) => {\r\n        if (a.done && !b.done) {\r\n          return 1\r\n        }\r\n\r\n        if (!a.done && b.done) {\r\n          return -1\r\n        }\r\n\r\n        return 0\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        todoItems: sortedItems,\r\n      }\r\n    }\r\n    case 'infoChange':\r\n      console.log(action.data)\r\n      const changedIndex = state.todoItems.findIndex(\r\n        ({id}) => id === action.data.id\r\n      )\r\n      const newTitle = action.data.title\r\n      const newDetails = action.data.details\r\n\r\n      return {\r\n        ...state,\r\n        todoItems: state.todoItems.map((item, index) => {\r\n          if (changedIndex === index) {\r\n            return {\r\n              ...item,\r\n              title: newTitle,\r\n              details: newDetails,\r\n            }\r\n          }\r\n\r\n          return item\r\n        }),\r\n      }\r\n\r\n    case 'toggleDone':\r\n      const itemIndex = state.todoItems.findIndex(\r\n        ({id}) => id === action.data.id\r\n      )\r\n      const item = state.todoItems[itemIndex]\r\n\r\n      return {\r\n        ...state,\r\n        todoItems: [\r\n          ...state.todoItems.slice(0, itemIndex),\r\n          {...item, done: !item.done},\r\n          ...state.todoItems.slice(itemIndex + 1),\r\n        ],\r\n      }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction generateId() {\r\n  return `${Date.now().toString(36)}-${Math.floor(\r\n    Math.random() * 1e16\r\n  ).toString(36)}`\r\n}\r\n","import {useCallback, useMemo, useEffect, useState} from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DragIndicatorIcon from '@material-ui/icons/DragIndicator'\r\nimport SortIcon from '@material-ui/icons/Sort'\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles'\r\nimport classnames from 'classnames'\r\nimport {motion} from 'framer-motion'\r\nimport {TodoItem, useTodoItems} from './TodoItemsContext'\r\nimport {DndContext, DragEndEvent} from '@dnd-kit/core'\r\nimport {SortableContext} from '@dnd-kit/sortable'\r\nimport {useSortable} from '@dnd-kit/sortable'\r\nimport {CSS} from '@dnd-kit/utilities'\r\nimport Button from '@material-ui/core/Button'\r\nimport {TextField} from '@material-ui/core'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\n\r\nconst spring = {\r\n  type: 'spring',\r\n  damping: 25,\r\n  stiffness: 120,\r\n  duration: 0.25,\r\n}\r\n\r\nconst useTodoItemListStyles = makeStyles({\r\n  root: {\r\n    listStyle: 'none',\r\n    padding: 0,\r\n  },\r\n})\r\n\r\nconst SortingButon = withStyles(theme => ({\r\n  root: {\r\n    marginTop: '15px',\r\n  },\r\n}))(Button)\r\n\r\nconst sortingKey = 'isSortingState'\r\nexport const TodoItemsList = function () {\r\n  const {dispatch, todoItems} = useTodoItems()\r\n  const classes = useTodoItemListStyles()\r\n  const itemIds = useMemo(() => todoItems.map(i => i.id), [todoItems])\r\n\r\n  const handleOnDragEnd = useCallback(\r\n    (event: DragEndEvent) => {\r\n      if (event.over?.id && event.active.id !== event.over?.id) {\r\n        const oldIndex = itemIds.indexOf(event.active.id)\r\n        const newIndex = itemIds.indexOf(event.over.id)\r\n        localStorage.setItem(sortingKey, 'false')\r\n\r\n        dispatch({\r\n          type: 'dragEnd',\r\n          data: {\r\n            oldIndex: oldIndex,\r\n            newIndex: newIndex,\r\n          },\r\n        })\r\n      }\r\n    },\r\n    [itemIds, dispatch]\r\n  )\r\n\r\n  const handleOnSort = useCallback(\r\n    () =>\r\n      dispatch({\r\n        type: 'setSorted',\r\n        data: undefined,\r\n      }),\r\n    [dispatch]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <DndContext onDragEnd={handleOnDragEnd}>\r\n        <SortableContext items={todoItems.map(i => i.id)}>\r\n          <SortingButon\r\n            variant='contained'\r\n            color='secondary'\r\n            onClick={() => {\r\n              localStorage.removeItem(sortingKey)\r\n              handleOnSort()\r\n            }}\r\n            startIcon={<SortIcon />}\r\n          >\r\n            Sort Again\r\n          </SortingButon>\r\n\r\n          <ul className={classes.root}>\r\n            {todoItems.map(item => (\r\n              <motion.li key={item.id} transition={spring} layout={true}>\r\n                <TodoItemCard item={item} />\r\n              </motion.li>\r\n            ))}\r\n          </ul>\r\n        </SortableContext>\r\n      </DndContext>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useTodoItemCardStyles = makeStyles({\r\n  root: {\r\n    marginTop: 24,\r\n    marginBottom: 24,\r\n  },\r\n  doneRoot: {\r\n    textDecoration: 'line-through',\r\n    color: '#888888',\r\n  },\r\n})\r\n\r\nexport const TodoItemCard = function ({item}: {item: TodoItem}) {\r\n  const classes = useTodoItemCardStyles()\r\n  const {dispatch} = useTodoItems()\r\n\r\n  const {attributes, listeners, setNodeRef, transform, transition} =\r\n    useSortable({id: item.id})\r\n\r\n  const style = {\r\n    transform: transform ? CSS.Translate.toString(transform) : '',\r\n    transition: transition ?? '',\r\n  }\r\n\r\n  const handleDelete = useCallback(\r\n    () => dispatch({type: 'delete', data: {id: item.id}}),\r\n    [item.id, dispatch]\r\n  )\r\n\r\n  const handleToggleDone = useCallback(\r\n    () =>\r\n      dispatch({\r\n        type: 'toggleDone',\r\n        data: {id: item.id},\r\n      }),\r\n    [item.id, dispatch]\r\n  )\r\n\r\n  const [titleInput, editTitleInput] = useState<string>(item.title)\r\n  const [detailsInput, editDetailsInput] = useState<string | undefined>(\r\n    item.details\r\n  )\r\n  const [titleError, setTitleError] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    editTitleInput(item.title)\r\n    editDetailsInput(item.details)\r\n  }, [item.title, item.details])\r\n\r\n  const changeItem = useCallback(() => {\r\n    if (titleInput.length > 1) {\r\n      setTitleError(undefined)\r\n      dispatch({\r\n        type: 'infoChange',\r\n        data: {id: item.id, title: titleInput, details: detailsInput},\r\n      })\r\n    } else {\r\n      setTitleError('Title should be at least 1 char')\r\n    }\r\n  }, [titleInput, detailsInput, item.id, dispatch])\r\n\r\n  return (\r\n    <Card\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={classnames(classes.root, {\r\n        [classes.doneRoot]: item.done,\r\n      })}\r\n    >\r\n      <CardHeader\r\n        action={\r\n          <IconButton aria-label='delete' onClick={handleDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        }\r\n        title={\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={item.done}\r\n                onChange={handleToggleDone}\r\n                name={`checked-${item.id}`}\r\n                color='primary'\r\n              />\r\n            }\r\n            label={item.title}\r\n          />\r\n        }\r\n        avatar={\r\n          <IconButton aria-label='drag' {...attributes} {...listeners}>\r\n            <DragIndicatorIcon />\r\n          </IconButton>\r\n        }\r\n        subheader={\r\n          <>\r\n            <div style={{display: 'flex'}}>\r\n              <TextField\r\n                required\r\n                style={{marginRight: '20px'}}\r\n                placeholder='Edit title'\r\n                type='text'\r\n                error={Boolean(titleError)}\r\n                onChange={e => {\r\n                  editTitleInput(e.target.value)\r\n                }}\r\n                value={titleInput}\r\n              />\r\n              <TextField\r\n                placeholder='Edit details'\r\n                type='text'\r\n                onChange={e => editDetailsInput(e.target.value)}\r\n                value={detailsInput}\r\n              />\r\n\r\n              <IconButton onClick={changeItem}>\r\n                <EditIcon />\r\n              </IconButton>\r\n            </div>\r\n            {titleError}\r\n          </>\r\n        }\r\n      />\r\n      {item.details ? (\r\n        <CardContent>\r\n          <Typography variant='body2' component='p'>\r\n            {item.details}\r\n          </Typography>\r\n        </CardContent>\r\n      ) : null}\r\n    </Card>\r\n  )\r\n}\r\n","import {useTodoItems} from './TodoItemsContext'\r\nimport {useForm, Controller} from 'react-hook-form'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useInputStyles = makeStyles(() => ({\r\n  root: {\r\n    marginBottom: 24,\r\n  },\r\n}))\r\n\r\nexport default function TodoItemForm() {\r\n  const classes = useInputStyles()\r\n  const {dispatch} = useTodoItems()\r\n  const {control, handleSubmit, reset, watch} = useForm()\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit(formData => {\r\n        dispatch({type: 'add', data: {todoItem: formData}})\r\n        reset({title: '', details: ''})\r\n      })}\r\n    >\r\n      <Controller\r\n        name='title'\r\n        control={control}\r\n        defaultValue=''\r\n        rules={{required: true}}\r\n        render={({field}) => (\r\n          <TextField\r\n            {...field}\r\n            label='TODO'\r\n            fullWidth={true}\r\n            className={classes.root}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        name='details'\r\n        control={control}\r\n        defaultValue=''\r\n        render={({field}) => (\r\n          <TextField\r\n            {...field}\r\n            label='Details'\r\n            fullWidth={true}\r\n            multiline={true}\r\n            className={classes.root}\r\n          />\r\n        )}\r\n      />\r\n      <Button\r\n        variant='contained'\r\n        color='primary'\r\n        type='submit'\r\n        disabled={!watch('title')}\r\n      >\r\n        Add\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {createMuiTheme} from '@material-ui/core/styles'\r\nimport {ThemeProvider} from '@material-ui/styles'\r\nimport {TodoItemsList} from './TodoItems'\r\nimport {TodoItemsContextProvider} from './TodoItemsContext'\r\nimport TodoItemForm from './TodoItemForm'\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#9012fe',\r\n    },\r\n    secondary: {\r\n      main: '#b2aabf',\r\n    },\r\n  },\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <TodoItemsContextProvider>\r\n      <ThemeProvider theme={theme}>\r\n        <Content />\r\n      </ThemeProvider>\r\n    </TodoItemsContextProvider>\r\n  )\r\n}\r\n\r\nfunction Content() {\r\n  return (\r\n    <Container maxWidth='sm'>\r\n      <header>\r\n        <Typography variant='h2' component='h1'>\r\n          Todo List\r\n        </Typography>\r\n      </header>\r\n      <main>\r\n        <TodoItemForm />\r\n        <TodoItemsList />\r\n      </main>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {ReportHandler} from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}